name: Build RustOS ISO

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-iso:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y xorriso mtools grub-common grub2-common build-essential
        
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: nightly
        targets: aarch64-unknown-none-softfloat
        components: rust-src, llvm-tools-preview
        
    - name: Install cargo-binutils
      run: cargo install cargo-binutils
      
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build RustOS kernel
      run: make release
      
    - name: Create ISO image
      run: make iso
      
    - name: Basic ISO verification
      run: |
        # Basic checks without mounting
        ISO_FILE=$(find . -name "rustos-*.iso" -type f | head -1)
        if [ -z "$ISO_FILE" ]; then
          echo "Error: No ISO file found"
          exit 1
        fi
        echo "Found ISO: $ISO_FILE"
        echo "Size: $(du -h "$ISO_FILE" | cut -f1)"
        
        # Check if it's a valid ISO
        if ! file "$ISO_FILE" | grep -q "ISO 9660"; then
          echo "Error: Invalid ISO format"
          exit 1
        fi
        echo "‚úì Valid ISO 9660 format"
        
        # List contents without mounting
        echo "ISO Contents:"
        xorriso -indev "$ISO_FILE" -find 2>/dev/null || echo "Could not list contents"
      
    - name: Get ISO filename
      id: iso-file
      run: |
        ISO_FILE=$(find . -name "rustos-*.iso" -type f -printf '%f\n' | head -1)
        echo "filename=$ISO_FILE" >> $GITHUB_OUTPUT
        echo "filepath=./$ISO_FILE" >> $GITHUB_OUTPUT
        
    - name: Upload ISO as artifact
      uses: actions/upload-artifact@v4
      with:
        name: rustos-iso
        path: ${{ steps.iso-file.outputs.filepath }}
        retention-days: 30
        
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        name: RustOS ${{ github.ref_name }}
        body: |
          # RustOS ARM64 Release ${{ github.ref_name }}
          
          ## üöÄ What's New
          - ARM64 microkernel with COSMIC desktop integration
          - Installable ISO image for real hardware and VMs
          - GRUB bootloader with multiple boot options
          - Automated installation script included
          
          ## üì¶ Downloads
          - **${{ steps.iso-file.outputs.filename }}**: Installable ISO image for ARM64 systems
          
          ## üñ•Ô∏è System Requirements
          - ARM64 (AArch64) processor
          - 2 GB RAM minimum, 4 GB recommended
          - 4 GB storage space minimum
          - UEFI or Legacy BIOS support
          
          ## üîß Installation
          1. Download the ISO image
          2. Write to USB: `dd if=${{ steps.iso-file.outputs.filename }} of=/dev/sdX bs=4M status=progress`
          3. Boot from USB and run: `sudo ./install.sh`
          
          ## üß™ Testing
          ```bash
          # Test in QEMU
          qemu-system-aarch64 -machine virt -cpu cortex-a72 -m 2G -cdrom ${{ steps.iso-file.outputs.filename }}
          ```
          
          ## üìö Documentation
          - See `ISO-README.md` for detailed installation instructions
          - Check `VERSION` file in ISO for build information
          
          Built from commit: ${{ github.sha }}
        files: ${{ steps.iso-file.outputs.filepath }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}